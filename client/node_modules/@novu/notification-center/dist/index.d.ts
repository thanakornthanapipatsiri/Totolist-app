/// <reference types="react" />
import * as _novu_shared from '@novu/shared';
import { IStyleButtons, IMessage, IMessageAction, ButtonTypeEnum, IOrganizationEntity, MessageActionStatusEnum, ISubscriberJwt } from '@novu/shared';
export { IMessage, IMessageAction, IOrganizationEntity, ISubscriberJwt } from '@novu/shared';
import { IUserPreferenceSettings, IStoreQuery } from '@novu/client';
export { IStoreQuery, IUserPreferenceSettings } from '@novu/client';
import React from 'react';
import { PopoverProps } from '@mantine/core';

declare enum ScreensEnum {
    NOTIFICATIONS = "notifications",
    SETTINGS = "settings"
}

interface INovuPopoverTheme extends INovuTheme {
    popover?: IThemePopover;
}
interface INovuTheme {
    layout?: IThemeLayout;
    header?: IThemeHeader;
    popover?: IThemePopover;
    notificationItem?: IThemeNotificationListItem;
    userPreferences?: IThemeUserPreferences;
    footer?: IThemeFooter;
    loaderColor?: string;
}
interface IThemeLayout {
    background?: string;
    boxShadow?: string;
    borderRadius?: string;
    wrapper?: {
        secondaryFontColor?: string;
    };
}
interface IThemeHeader {
    badgeColor?: string;
    badgeTextColor?: string;
    fontColor?: string;
}
interface IThemePopover {
    arrowColor?: string;
}
interface IThemeNotificationListItem {
    seen?: {
        fontColor?: string;
        background?: string;
        timeMarkFontColor?: string;
    };
    unseen?: {
        fontColor?: string;
        background?: string;
        boxShadow?: string;
        notificationItemBeforeBrandColor?: string;
        timeMarkFontColor?: string;
    };
    buttons: IStyleButtons;
}
interface IThemeUserPreferences {
    settingsButtonColor?: string;
    accordion?: {
        background?: string;
        fontColor?: string;
        secondaryFontColor?: string;
        boxShadow?: string;
        arrowColor?: string;
        dividerColor?: string;
    };
    accordionItem: {
        fontColor?: {
            active?: string;
            inactive?: string;
        };
        icon?: {
            active?: string;
            inactive?: string;
        };
        switch?: {
            backgroundChecked?: string;
            backgroundUnchecked?: string;
        };
    };
}
interface IThemeFooter {
    logoTextColor?: string;
    logoPrefixFontColor?: string;
}
interface ISvgStopColor {
    stopColor?: string;
    stopColorOffset?: string;
}

interface INovuThemePopoverProvider {
    light?: INovuPopoverTheme;
    dark?: INovuPopoverTheme;
    common?: ICommonTheme;
}
interface INovuThemeProvider {
    light?: INovuTheme;
    dark?: INovuTheme;
    common?: ICommonTheme;
}
interface ICommonTheme {
    fontFamily?: string;
}
interface INovuThemeProviderProps {
    children: React.ReactNode;
    colorScheme: ColorScheme;
    theme: INovuThemeProvider;
}
declare function NovuThemeProvider(props: INovuThemeProviderProps): JSX.Element;

interface IScreenContext {
    screen: ScreensEnum;
    setScreen: (screen: ScreensEnum) => void;
}

interface ITranslationContent {
    readonly notifications: string;
    readonly markAllAsRead: string;
    readonly poweredBy: string;
    readonly settings: string;
}
interface ITranslationEntry {
    readonly translations: Partial<ITranslationContent>;
    readonly lang: string;
}
declare const TRANSLATIONS: Record<I18NLanguage, ITranslationEntry>;
declare type I18NLanguage = 'en' | 'fi' | 'hi' | 'it' | 'gj' | 'ru' | 'uk' | 'es' | 'ar' | 'fa' | 'fr' | 'de' | 'bn' | 'ml' | 'zh' | 'hr';

interface INotificationCenterProps {
    onUrlChange?: (url: string) => void;
    onNotificationClick?: (notification: IMessage) => void;
    onUnseenCountChanged?: (unseenCount: number) => void;
    header?: () => JSX.Element;
    footer?: () => JSX.Element;
    listItem?: ListItem;
    actionsResultBlock?: (templateIdentifier: string, messageAction: IMessageAction) => JSX.Element;
    colorScheme: ColorScheme;
    theme?: INovuThemeProvider;
    onActionClick?: (templateIdentifier: string, type: ButtonTypeEnum, message: IMessage) => void;
    tabs?: ITab[];
    showUserPreferences?: boolean;
    onTabClick?: (tab: ITab) => void;
}
declare function NotificationCenter(props: INotificationCenterProps): JSX.Element;

interface IActionContainerProps {
    action?: IMessageAction;
    onActionClick: (actionButtonType: ButtonTypeEnum) => void;
}
declare function ActionContainer({ action, onActionClick }: IActionContainerProps): JSX.Element;

interface INovuProviderProps {
    stores?: IStore[];
    children: React.ReactNode;
    backendUrl?: string;
    subscriberId?: string;
    applicationIdentifier: string;
    colorScheme?: ColorScheme;
    socketUrl?: string;
    onLoad?: (data: {
        organization: IOrganizationEntity;
    }) => void;
    subscriberHash?: string;
    i18n?: I18NLanguage | ITranslationEntry;
}
declare function NovuProvider(props: INovuProviderProps): JSX.Element;

interface INotificationBellProps {
    unseenCount?: number;
    unseenBadgeColor?: string | ISvgStopColor;
    unseenBadgeBackgroundColor?: string;
    colorScheme?: ColorScheme;
}
declare function NotificationBell(props: INotificationBellProps): JSX.Element;
declare function GradientDotWrap({ bellColors, ...props }: {
    [x: string]: any;
    bellColors: any;
}): JSX.Element;

interface IPopoverNotificationCenterProps {
    onUrlChange?: (url: string) => void;
    onNotificationClick: (notification: IMessage) => void;
    onUnseenCountChanged?: (unseenCount: number) => void;
    children: (props: INotificationBellProps) => JSX.Element;
    header?: () => JSX.Element;
    footer?: () => JSX.Element;
    listItem?: ListItem;
    colorScheme: ColorScheme;
    theme?: INovuThemePopoverProvider;
    onActionClick?: (templateIdentifier: string, type: ButtonTypeEnum, message: IMessage) => void;
    actionsResultBlock?: (templateIdentifier: string, messageAction: IMessageAction) => JSX.Element;
    tabs?: ITab[];
    showUserPreferences?: boolean;
    onTabClick?: (tab: ITab) => void;
    offset?: number;
    position?: PopoverProps['position'] | `${NonNullable<PopoverProps['position']>}-${NonNullable<Exclude<PopoverProps['placement'], 'center'>>}`;
}
declare function PopoverNotificationCenter({ children, ...props }: IPopoverNotificationCenterProps): JSX.Element;

declare function useUnseenCount(): {
    unseenCount: any;
    setUnseenCount: (count: number) => void;
};

declare function useSocket(): {
    socket: ISocket;
};

interface IUseNotificationsProps {
    storeId?: string;
}
declare function useNotifications(props?: IUseNotificationsProps): {
    notifications: _novu_shared.IMessage[];
    fetchNextPage: () => Promise<void>;
    hasNextPage: boolean;
    fetching: boolean;
    markAsSeen: (messageId: string) => Promise<_novu_shared.IMessage>;
    updateAction: (messageId: string, actionButtonType: ButtonTypeEnum, status: MessageActionStatusEnum, payload?: Record<string, unknown>) => Promise<void>;
    refetch: () => Promise<void>;
};

declare const useScreens: () => IScreenContext;

declare function useSubscriberPreference(): {
    preferences: IUserPreferenceSettings[];
    updatePreference: (preferenceItem: IUserPreferenceSettings, channelType: string, checked: boolean, preferenceIndex: number) => Promise<void>;
    loading: boolean;
};

declare function SubscriberPreference(): JSX.Element;

interface IAuthContext {
    applyToken: (token: string | null) => void;
    setUser: (profile: ISubscriberJwt) => void;
    token: string | null;
    user: ISubscriberJwt | null;
    isLoggedIn: boolean;
}
interface ISocket {
    on: (eventName: string, callback: (data: any) => void) => void;
    off: (eventName: string) => void;
}
interface ISocketContext {
    socket: ISocket | null;
}
interface IUserInfo {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
}
interface INotificationCenterContext {
    onUrlChange: (url: string) => void;
    onNotificationClick: (notification: IMessage) => void;
    onUnseenCountChanged: (unseenCount: number) => void;
    onActionClick: (identifier: string, type: ButtonTypeEnum, message: IMessage) => void;
    isLoading: boolean;
    header: () => JSX.Element;
    footer: () => JSX.Element;
    listItem: ListItem;
    actionsResultBlock: (templateIdentifier: string, messageAction: IMessageAction) => JSX.Element;
    tabs?: ITab[];
    showUserPreferences?: boolean;
    onTabClick?: (tab: ITab) => void;
}
interface IStore {
    storeId: string;
    query?: IStoreQuery;
}
declare type ListItem = (message: IMessage, onActionButtonClick: (actionButtonType: ButtonTypeEnum) => void, onNotificationClick: () => void) => JSX.Element;
interface INovuProviderContext {
    backendUrl?: string;
    subscriberId?: string;
    applicationIdentifier?: string;
    initialized: boolean;
    socketUrl?: string;
    onLoad: (data: {
        organization: IOrganizationEntity;
    }) => void;
    subscriberHash: string;
    stores?: IStore[];
}
interface INotificationsContext {
    notifications?: Record<string, IMessage[]>;
    fetchNextPage?: (storeId?: string, query?: IStoreQuery) => void;
    hasNextPage?: Map<string, boolean>;
    fetching?: boolean;
    markAsSeen?: (messageId: string) => Promise<IMessage>;
    updateAction?: (messageId: string, actionButtonType: ButtonTypeEnum, status: MessageActionStatusEnum, payload?: Record<string, unknown>, storeId?: string) => void;
    refetch?: (storeId?: string, query?: IStoreQuery) => void;
}
declare type ColorScheme = 'light' | 'dark';
interface ITab {
    name: string;
    storeId: string;
}

export { ActionContainer, ColorScheme, GradientDotWrap, I18NLanguage, IActionContainerProps, IAuthContext, ICommonTheme, INotificationBellProps, INotificationCenterContext, INotificationCenterProps, INotificationsContext, INovuPopoverTheme, INovuProviderContext, INovuThemePopoverProvider, INovuThemeProvider, ISocket, ISocketContext, IStore, ITab, ITranslationContent, ITranslationEntry, IUserInfo, ListItem, NotificationBell, NotificationCenter, NovuProvider, NovuThemeProvider, PopoverNotificationCenter, ScreensEnum, SubscriberPreference, TRANSLATIONS, useNotifications, useScreens, useSocket, useSubscriberPreference, useUnseenCount };
